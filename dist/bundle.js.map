{"version":3,"sources":["webpack://card_game/./src/Card.ts","webpack://card_game/./src/GameScene.ts","webpack://card_game/./src/utils.ts","webpack://card_game/webpack/bootstrap","webpack://card_game/./src/app.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["import { CardPosition } from \"./utils\";\r\n\r\nexport class Card extends Phaser.GameObjects.Sprite {\r\n    public value: number;\r\n    public opened: boolean;\r\n\r\n    constructor(scene: Phaser.Scene, value: number, position: CardPosition) {\r\n        super(scene, position.x, position.y, \"card\");\r\n        this.scene = scene;\r\n        this.value = value;\r\n        this.opened = false;\r\n        this.scene.add.existing(this);\r\n\r\n        // make this sprite clickable\r\n        this.setInteractive(); // it`s a flag which makes sprite interactive\r\n    }\r\n\r\n    private flipCard() {\r\n        this.scene.tweens.add({\r\n            targets: this,\r\n            scaleX: 0,\r\n            ease: \"Linear\",\r\n            duration: 200,\r\n            onComplete: () => {\r\n                this.showCard(this)\r\n            }\r\n        });\r\n    }\r\n\r\n    private showCard(context: Card) {\r\n        const texture = this.opened ? \"card\" + this.value : \"card\";\r\n        // change one texture of the sprite into another one\r\n        context.setTexture(texture); // result - \"card0\", \"card1\" ...\r\n        context.scene.tweens.add({\r\n            targets: context,\r\n            scaleX: 1,\r\n            ease: \"Linear\",\r\n            duration: 200\r\n        });\r\n    }\r\n\r\n    public open() {\r\n        this.opened = true;\r\n        this.flipCard();\r\n    }\r\n\r\n    public close() {\r\n        this.opened = false;\r\n        this.flipCard();\r\n    }\r\n\r\n    public moveSmoothly(position: CardPosition, delayTime: number) {\r\n        this.scene.tweens.add({\r\n            targets: this,\r\n            x: position.x,\r\n            y: position.y,\r\n            ease: \"Linear\",\r\n            delay: delayTime,\r\n            duration: 250,\r\n        });\r\n    }\r\n}\r\n","import { Card } from \"./Card\";\r\nimport { CardPosition, Sound, Offset, startTime } from \"./utils\";\r\n\r\nexport class GameScene extends Phaser.Scene {\r\n\r\n    private cards: Card[] = [];\r\n    private positionArray: CardPosition[] = [];\r\n    private sounds: Sound = null;\r\n    private openCard: Card | null = null;\r\n    private cardPairsCount: number = 0;\r\n    private timeText: Phaser.GameObjects.Text | undefined;\r\n    private timer: Phaser.Time.TimerEvent = new Phaser.Time.TimerEvent({});\r\n    private timeout: number = 0;\r\n\r\n    constructor() {\r\n        super({key: \"game-scene\"});\r\n    }\r\n\r\n    protected preload(): void {\r\n        this.load.image(\"bg\", \"assets/background.png\");\r\n        this.load.image(\"card\", \"assets/card.png\");\r\n        this.load.image(\"card0\", \"assets/card1.png\");\r\n        this.load.image(\"card1\", \"assets/card2.png\");\r\n        this.load.image(\"card2\", \"assets/card3.png\");\r\n        this.load.image(\"card3\", \"assets/card4.png\");\r\n        this.load.image(\"card4\", \"assets/card5.png\");\r\n\r\n        this.load.audio(\"theme\", \"assets/sounds/theme.mp3\");\r\n        this.load.audio(\"card\", \"assets/sounds/card.mp3\");\r\n        this.load.audio(\"complete\", \"assets/sounds/complete.mp3\");\r\n        this.load.audio(\"success\", \"assets/sounds/success.mp3\");\r\n        this.load.audio(\"timeout\", \"assets/sounds/timeout.mp3\");\r\n    }\r\n\r\n    protected create(): void {\r\n        this.timeout = startTime;\r\n        // order of elements MATTERS!!!\r\n        this.createSounds();\r\n        this.createBackground();\r\n        this.createCards();\r\n        this.createTimer();\r\n        this.createText();\r\n    }\r\n\r\n    private createSounds() {\r\n        this.sounds = {\r\n            theme: this.sound.add(\"theme\"),\r\n            card: this.sound.add(\"card\"),\r\n            complete: this.sound.add(\"complete\"),\r\n            success: this.sound.add(\"success\"),\r\n            timeout: this.sound.add(\"timeout\")\r\n        };\r\n        this.sounds.theme.play({volume: 0.15});\r\n    }\r\n\r\n    private restartGame() {\r\n        this.sounds?.theme.play({volume: 0.15});\r\n        this.timeout = startTime;\r\n        this.openCard = null;\r\n        this.cardPairsCount = 0;\r\n        // Phaser.Utils.Array.Shuffle(this.positionArray); // make a random array\r\n        for (let i = 0; i < this.cards.length; i++) {\r\n            this.cards[i].close(); // close each card\r\n            // set new position for each card\r\n            this.cards[i].setPosition(this.positionArray[i].x, this.positionArray[i].y);\r\n        }\r\n        // animate the disappearance of cards\r\n        this.positionArray = this.outsideCardsPosition();\r\n        for (let i = 0; i < this.positionArray.length; i++) {\r\n            const delayTime: number = i * 100;\r\n            this.cards[i].moveSmoothly(this.positionArray[i], delayTime);\r\n        }\r\n        setTimeout(() => { this.displayCardsSmoothly() }, 1000);\r\n    }\r\n\r\n    private onTimerTick() {\r\n        this.timeText?.setText(`Time: ${this.timeout--}`);\r\n        if (this.timeout < 0) {\r\n            this.timer.paused = true; // stop timer\r\n            this.sounds?.timeout.play({volume: 1.5});\r\n            this.restartGame();\r\n        }\r\n    }\r\n\r\n    private createTimer() {\r\n        this.timer = this.time.addEvent({\r\n            delay: 1000,\r\n            callback: this.onTimerTick,\r\n            loop: true,\r\n            callbackScope: this // to pass the correct context\r\n        });\r\n    }\r\n\r\n    private createText() {\r\n        this.timeText = this.add.text(10, 336, \"\", { font: \"36px CurseCasual\", color: \"#ffffff\" });\r\n    }\r\n\r\n    private createBackground(): void {\r\n        this.add.sprite(0, 0, \"bg\").setOrigin(0, 0);\r\n    }\r\n\r\n    private createCards(): void {\r\n        this.positionArray = this.outsideCardsPosition();\r\n        \r\n        // create a list of cards` pairs\r\n        let index: number = 0;\r\n        for (let i: number = 0; i < this.positionArray.length; i++) {\r\n            if (i >= 5) {\r\n                this.cards.push(new Card(this, index, this.positionArray[i]));\r\n                ++index;\r\n            } else {\r\n                this.cards.push(new Card(this, i, this.positionArray[i]));\r\n            }\r\n        }\r\n\r\n        this.displayCardsSmoothly();\r\n        \r\n        // assign listener to each card\r\n        this.cards.forEach((card: Card) => {\r\n            card.on(\"pointerdown\", () => this.openCardClick(card), this);\r\n        });\r\n    }\r\n\r\n    private displayCardsSmoothly() {\r\n        this.positionArray = this.getCardsPosition();\r\n        Phaser.Utils.Array.Shuffle(this.positionArray); // make a random array\r\n\r\n        let delayTime: number = 0;\r\n        // display cards with animation\r\n        for (let i = 0; i < this.positionArray.length; i++) {\r\n            this.cards[i].moveSmoothly(this.positionArray[i], delayTime);\r\n            this.cards[i].depth = i; // it`s like z-index of texture\r\n            delayTime = i * 100;\r\n        }\r\n        this.timer.paused = false; // start timer\r\n    }\r\n\r\n    private openCardClick(card: Card): void {\r\n        // if clicked card is already opened, nothing\r\n        if (card.opened) {\r\n            return;\r\n        }\r\n\r\n        this.sounds?.card.play({volume: 0.7});\r\n\r\n        if (this.openCard) { // remember the last opened card in prop this.openCard\r\n            if (this.openCard.value === card.value) { // compare prop this.openCard and new card\r\n                this.openCard = null; // clean prop\r\n                this.cardPairsCount++;\r\n                this.sounds?.success.play({volume: 1.5});\r\n            } else {\r\n                // textures are different\r\n                this.openCard.close(); //  -> close the previous card through prop-pointer this.openCard\r\n                this.openCard = card; // assign newly opened card to prop this.openCard\r\n            }\r\n        } else {\r\n            this.openCard = card; // assign newly opened card to prop this.openCard\r\n        }\r\n        // open new card\r\n        card.open();\r\n\r\n        // check if all cards` pairs are opened\r\n        if (this.cardPairsCount === this.cards.length / 2) {\r\n            this.timer.paused = true; // stop timer\r\n            this.sounds?.complete.play({ volume: 1.5 });\r\n            setTimeout(() => this.restartGame(), 400);\r\n        }\r\n    }\r\n\r\n    private getCardsPosition(): CardPosition[] {\r\n        const cardsPosition: CardPosition[] = [];\r\n        const cardTexture = this.textures.get(\"card\").getSourceImage() as HTMLImageElement;\r\n        const cardWidth: number = cardTexture.width + 4;\r\n        const cardHeight: number = cardTexture.height + 4;\r\n\r\n        for (let row = 0; row < 2; row++) {\r\n            for (let col = 0; col < 5; col++) {\r\n                cardsPosition.push({\r\n                    x: Offset.OFFSET_X + col * cardWidth + cardWidth / 2,\r\n                    y: Offset.OFFSET_Y + row * cardHeight + cardHeight / 2,\r\n                });\r\n            }\r\n        }\r\n        return cardsPosition;\r\n    }\r\n\r\n    private outsideCardsPosition(): CardPosition[] {\r\n        const cardsPosition: CardPosition[] = [];\r\n        const cardTexture = this.textures.get(\"card\").getSourceImage() as HTMLImageElement;\r\n        const cardWidth: number = cardTexture.width;\r\n        const cardHeight: number = cardTexture.height;\r\n\r\n        for (let row = 0; row < 2; row++) {\r\n            for (let col = 0; col < 5; col++) {\r\n                cardsPosition.push({\r\n                    x: cardWidth * -1,\r\n                    y: cardHeight * -1,\r\n                });\r\n            }\r\n        }\r\n        return cardsPosition;\r\n    }\r\n}\r\n","import { GameScene } from \"./GameScene\";\r\n\r\nexport const config: object = {\r\n    type: Phaser.AUTO,\r\n    width: 1280,\r\n    height: 720,\r\n    scene: [new GameScene()]\r\n};\r\n\r\nexport type CardPosition = {\r\n    x: number,\r\n    y: number\r\n};\r\n\r\nexport type Sound = {\r\n    theme: Phaser.Sound.BaseSound,\r\n    card: Phaser.Sound.BaseSound,\r\n    complete: Phaser.Sound.BaseSound,\r\n    success: Phaser.Sound.BaseSound,\r\n    timeout: Phaser.Sound.BaseSound\r\n} | null;\r\n\r\nexport enum Offset {\r\n    OFFSET_X = 140,\r\n    OFFSET_Y = 50\r\n};\r\n\r\nexport const startTime: number = 30;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { config } from \"./utils\";\r\n\r\nnew Phaser.Game(config);\r\n"],"sourceRoot":""}